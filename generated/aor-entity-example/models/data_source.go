// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSource data source
// swagger:model DataSource
type DataSource struct {

	// cluster name
	ClusterName string `json:"clusterName,omitempty" gorm:"cluster_name" yaml:"cluster_name" toml:"cluster_name"`

	// current
	Current bool `json:"current,omitempty" gorm:"current" yaml:"current" toml:"current"`

	// db name
	DbName string `json:"dbName,omitempty" gorm:"db_name" yaml:"db_name" toml:"db_name"`

	// host
	Host string `json:"host,omitempty" gorm:"host" yaml:"host" toml:"host"`

	// id
	ID string `json:"id,omitempty" gorm:"primary_key" yaml:"-" toml:"-"`

	// index name
	IndexName string `json:"indexName,omitempty" gorm:"index_name" yaml:"index_name" toml:"index_name"`

	// jdbc Url
	JdbcURL string `json:"jdbcUrl,omitempty" gorm:"jdbc_url" yaml:"jdbc_url" toml:"jdbc_url"`

	// my Sql db name
	MySQLDbName string `json:"mySqlDbName,omitempty" gorm:"mysql_db_name" yaml:"mysql_db_name" toml:"mysql_db_name"`

	// password
	Password strfmt.Password `json:"password,omitempty" gorm:"password" yaml:"password" toml:"password"`

	// port
	Port string `json:"port,omitempty" gorm:"port" yaml:"port" toml:"port"`

	// prefix path
	PrefixPath string `json:"prefixPath,omitempty" gorm:"prefix_path" yaml:"prefix_path" toml:"prefix_path"`

	// ssl mode
	SslMode string `json:"sslMode,omitempty" gorm:"ssl_mode" yaml:"ssl_mode" toml:"ssl_mode"`

	// type
	Type string `json:"type,omitempty" gorm:"type" yaml:"type" toml:"type"`

	// username
	Username string `json:"username,omitempty" gorm:"username" yaml:"username" toml:"username"`
}

// Validate validates this data source
func (m *DataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mongo","mysql","cds","es","postgres","boltdb","bleve","dgraph","neo4j","arrangodb","tidedb","rocksdb","leveldb","sqlite3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeTypePropEnum = append(dataSourceTypeTypePropEnum, v)
	}
}

const (
	// DataSourceTypeMongo captures enum value "mongo"
	DataSourceTypeMongo string = "mongo"
	// DataSourceTypeMysql captures enum value "mysql"
	DataSourceTypeMysql string = "mysql"
	// DataSourceTypeCds captures enum value "cds"
	DataSourceTypeCds string = "cds"
	// DataSourceTypeEs captures enum value "es"
	DataSourceTypeEs string = "es"
	// DataSourceTypePostgres captures enum value "postgres"
	DataSourceTypePostgres string = "postgres"
	// DataSourceTypeBoltdb captures enum value "boltdb"
	DataSourceTypeBoltdb string = "boltdb"
	// DataSourceTypeBleve captures enum value "bleve"
	DataSourceTypeBleve string = "bleve"
	// DataSourceTypeDgraph captures enum value "dgraph"
	DataSourceTypeDgraph string = "dgraph"
	// DataSourceTypeNeo4j captures enum value "neo4j"
	DataSourceTypeNeo4j string = "neo4j"
	// DataSourceTypeArrangodb captures enum value "arrangodb"
	DataSourceTypeArrangodb string = "arrangodb"
	// DataSourceTypeTidedb captures enum value "tidedb"
	DataSourceTypeTidedb string = "tidedb"
	// DataSourceTypeRocksdb captures enum value "rocksdb"
	DataSourceTypeRocksdb string = "rocksdb"
	// DataSourceTypeLeveldb captures enum value "leveldb"
	DataSourceTypeLeveldb string = "leveldb"
	// DataSourceTypeSqlite3 captures enum value "sqlite3"
	DataSourceTypeSqlite3 string = "sqlite3"
)

// prop value enum
func (m *DataSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSource) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSource) UnmarshalBinary(b []byte) error {
	var res DataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
